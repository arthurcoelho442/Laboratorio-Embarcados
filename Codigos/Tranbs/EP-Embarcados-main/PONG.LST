     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                  mov 		ax,data
     8 00000003 8ED8                      mov 		ds,ax
     9 00000005 B8[0000]                  mov 		ax,stack
    10 00000008 8ED0                      mov 		ss,ax
    11 0000000A BC[0002]                  mov 		sp,stacktop
    12                                  
    13                                  	; configuracao de interrupcao
    14 0000000D FA                      	cli
    15 0000000E 31C0                    	xor     ax, ax
    16 00000010 8EC0                    	mov     es, ax
    17 00000012 26A12400                	mov     ax, [es:int9*4];carregou ax com offset anterior
    18 00000016 A3[0300]                	mov     [offset_dos], ax        ; offset_dos guarda o end. para qual ip de int 9 estava apontando anteriormente
    19 00000019 26A12600                	mov     ax, [es:int9*4+2]     ; cs_dos guarda o end. anterior de cs
    20 0000001D A3[0100]                	mov     [cs_dos], ax		 
    21 00000020 268C0E2600              	mov     [es:int9*4+2], cs
    22 00000025 26C7062400[AA02]        	mov     WORD [es:int9*4],keyint
    23 0000002C FB                      	sti
    24                                  
    25                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    26 0000002D B40F                      mov  		ah,0Fh
    27 0000002F CD10                      int  		10h
    28 00000031 A2[0F00]                  mov  		[modo_anterior],al   
    29                                  
    30                                  ; alterar modo de video para gr�fico 640x480 16 cores
    31 00000034 B012                      mov     	al,12h
    32 00000036 B400                      mov     	ah,0
    33 00000038 CD10                      int     	10h
    34                                  	
    35 0000003A E84F00                    call desenhaLinhas
    36 0000003D E8B100                    call textoEmbarcados
    37 00000040 E8C800                  	call escreveNome
    38 00000043 E8DF00                  	call escreveComputador
    39                                  inicio:
    40                                  	; call leTeclado
    41 00000046 E82601                  	call desenhaPlacar
    42 00000049 E88A01                  	call desenhaRaquete
    43 0000004C E8F000                  	call escreveVelocidadeAtual
    44 0000004F E8B401                  	call sobrepoe_bola
    45 00000052 E8E701                  	call colisao_x
    46                                  
    47                                  checa_y:
    48 00000055 A1[2000]                  mov 	ax, [py_bola]
    49 00000058 0306[1A00]                add		ax, [vely]
    50 0000005C 3D8F01                    cmp		ax, 399
    51 0000005F 7D05                      jge		troca_y
    52 00000061 3D0900                    cmp		ax, 9
    53 00000064 7D0B                      jge		move_bola
    54                                  troca_y:
    55 00000066 BBFFFF                    mov		bx, -1
    56 00000069 A1[1A00]                  mov		ax, [vely]
    57 0000006C F7EB                      imul	bx
    58 0000006E A3[1A00]                  mov		[vely], ax
    59                                  
    60                                  move_bola:
    61 00000071 E8A601                  		call desenha_bola_vermelha
    62 00000074 B40B                    		mov    	ah,0Bh
    63 00000076 CD21                    		int     21h
    64 00000078 30C0                    		xor 		al, al
    65                                  
    66 0000007A B90000                  		mov cx, 0
    67 0000007D 8B16[1C00]              		mov dx, word[vel_relogio]
    68 00000081 B486                    		mov ah, 86h
    69 00000083 CD15                    		int 15h
    70 00000085 31C0                    		xor 		ax, ax
    71                                  
    72 00000087 74BD                    		jz inicio
    73                                  
    74                                  		; fim loop
    75 00000089 E87802                  		call fim_programa
    76                                      
    77                                  desenhaLinhas:
    78                                  ;desenhar retas
    79 0000008C C606[0000]0F              mov		byte[cor],branco_intenso	
    80 00000091 B80000                    mov		ax, 0
    81 00000094 50                        push		ax
    82 00000095 B80000                    mov		ax, 0
    83 00000098 50                        push		ax
    84 00000099 B87F02                    mov		ax, 639
    85 0000009C 50                        push		ax
    86 0000009D B80000                    mov		ax, 0
    87 000000A0 50                        push		ax
    88 000000A1 E8EF04                    call		line
    89                                  
    90 000000A4 B87F02                    mov		ax, 639
    91 000000A7 50                        push		ax
    92 000000A8 B80000                    mov		ax, 0
    93 000000AB 50                        push		ax
    94 000000AC B87F02                    mov		ax, 639
    95 000000AF 50                        push		ax
    96 000000B0 B8DF01                    mov		ax, 479
    97 000000B3 50                        push		ax
    98 000000B4 E8DC04                    call		line
    99                                  
   100 000000B7 B87F02                    mov		ax, 639
   101 000000BA 50                        push		ax
   102 000000BB B8DF01                    mov		ax, 479
   103 000000BE 50                        push		ax
   104 000000BF B80000                    mov		ax, 0
   105 000000C2 50                        push		ax
   106 000000C3 B8DF01                    mov		ax, 479
   107 000000C6 50                        push		ax
   108 000000C7 E8C904                    call		line
   109                                  
   110 000000CA B80000                    mov		ax, 0
   111 000000CD 50                        push		ax
   112 000000CE B8DF01                    mov		ax, 479
   113 000000D1 50                        push		ax
   114 000000D2 B80000                    mov		ax, 0
   115 000000D5 50                        push		ax
   116 000000D6 B80000                    mov		ax, 0
   117 000000D9 50                        push		ax
   118 000000DA E8B604                    call		line
   119                                  
   120 000000DD B80000                    mov		ax, 0
   121 000000E0 50                        push		ax
   122 000000E1 B89901                    mov		ax, 409
   123 000000E4 50                        push		ax
   124 000000E5 B87F02                    mov		ax, 639
   125 000000E8 50                        push		ax
   126 000000E9 B89901                    mov		ax, 409
   127 000000EC 50                        push		ax
   128 000000ED E8A304                    call		line
   129 000000F0 C3                        ret
   130                                  
   131                                  textoEmbarcados:
   132 000000F1 B93A00                    mov cx, 58
   133 000000F4 BB0000                    mov bx, 0
   134 000000F7 B601                      mov dh, 1
   135 000000F9 B20A                      mov dl, 10
   136                                  
   137                                    lEmbarcados:
   138 000000FB E89E02                      call cursor
   139 000000FE 8A87[4000]                  mov al, [bx+embarcados]
   140 00000102 E8AE02                      call caracter
   141 00000105 43                          inc bx
   142 00000106 FEC2                        inc dl
   143 00000108 E2F1                        loop lEmbarcados
   144 0000010A C3                        ret
   145                                  
   146                                  escreveNome:
   147 0000010B B91D00                  	mov cx, 29
   148 0000010E BB0000                  	mov bx, 0
   149 00000111 B603                    	mov dh, 3
   150 00000113 B204                    	mov dl, 4
   151                                  
   152                                  	lNome:
   153 00000115 E88402                  		call cursor
   154 00000118 8A87[7A00]                  mov al, [bx+nome]
   155 0000011C E89402                      call caracter
   156 0000011F 43                          inc bx
   157 00000120 FEC2                        inc dl
   158 00000122 E2F1                        loop lNome
   159 00000124 C3                        ret
   160                                  
   161                                  escreveComputador:
   162 00000125 B90A00                  	mov cx, 10
   163 00000128 BB0000                  	mov bx, 0
   164 0000012B B603                    	mov dh, 3
   165 0000012D B22A                    	mov dl, 42
   166                                  
   167                                  	lComputador:
   168 0000012F E86A02                  		call cursor
   169 00000132 8A87[9700]                  mov al, [bx+computador]
   170 00000136 E87A02                      call caracter
   171 00000139 43                          inc bx
   172 0000013A FEC2                        inc dl
   173 0000013C E2F1                        loop lComputador
   174 0000013E C3                        ret
   175                                  
   176                                  escreveVelocidadeAtual:
   177 0000013F B91200                  	mov cx, 18
   178 00000142 BB0000                  	mov bx, 0
   179 00000145 B603                    	mov dh, 3
   180 00000147 B237                    	mov dl, 55
   181                                  
   182                                  	lVelocidadeAtual:
   183 00000149 E85002                  		call cursor
   184 0000014C 8A87[A100]                  mov al, [bx+velocidade_atual_txt]
   185 00000150 E86002                      call caracter
   186 00000153 43                          inc bx
   187 00000154 FEC2                        inc dl
   188 00000156 E2F1                        loop lVelocidadeAtual
   189 00000158 B90100                  	mov cx, 1
   190 0000015B BB0000                  	mov bx, 0
   191 0000015E B603                    	mov dh, 3
   192 00000160 B249                    	mov dl, 73
   193                                  
   194 00000162 E83702                  	call cursor
   195 00000165 8A87[B300]              	mov al, [bx+velocidade_jogo]
   196 00000169 0430                    	add al, '0'
   197 0000016B E84502                  	call caracter
   198 0000016E C3                      	ret
   199                                  
   200                                  desenhaPlacar:
   201 0000016F C606[0000]0F            	mov		byte[cor],branco_intenso
   202 00000174 B90100                  	mov cx, 1
   203 00000177 B603                    	mov dh, 3
   204 00000179 B222                    	mov dl, 34
   205 0000017B E81E02                  	call cursor
   206 0000017E A0[2E00]                	mov al, [player_points_1]
   207 00000181 0430                    	add al, '0'
   208 00000183 E82D02                  	call caracter
   209                                  
   210 00000186 B90100                  	mov cx, 1
   211 00000189 B603                    	mov dh, 3
   212 0000018B B223                    	mov dl, 35
   213 0000018D E80C02                  	call cursor
   214 00000190 A0[2C00]                	mov al, [player_points_0]
   215 00000193 0430                    	add al, '0'
   216 00000195 E81B02                  	call caracter
   217                                  
   218 00000198 B90300                  	mov cx, 3
   219 0000019B BB0000                  	mov bx, 0
   220 0000019E B603                    	mov dh, 3
   221 000001A0 B224                    	mov dl, 36
   222                                  
   223                                  	lPlacar:
   224 000001A2 E8F701                  		call cursor
   225 000001A5 8A87[B400]                  mov al, [bx+placar]
   226 000001A9 E80702                      call caracter
   227 000001AC 43                          inc bx
   228 000001AD FEC2                        inc dl
   229 000001AF E2F1                        loop lPlacar
   230                                  
   231 000001B1 B90100                  	mov cx, 1
   232 000001B4 B603                    	mov dh, 3
   233 000001B6 B227                    	mov dl, 39
   234 000001B8 E8E101                  	call cursor
   235 000001BB A0[2F00]                	mov al, [pc_points_1]
   236 000001BE 0430                    	add al, '0'
   237 000001C0 E8F001                  	call caracter
   238                                  
   239 000001C3 B90100                  	mov cx, 1
   240 000001C6 B603                    	mov dh, 3
   241 000001C8 B228                    	mov dl, 40
   242 000001CA E8CF01                  	call cursor
   243 000001CD A0[2D00]                	mov al, [pc_points_0]
   244 000001D0 0430                    	add al, '0'
   245 000001D2 E8DE01                  	call caracter
   246 000001D5 C3                      	ret
   247                                  
   248                                  desenhaRaquete:
   249 000001D6 B85802                  	mov		ax, 600
   250 000001D9 50                        push		ax
   251 000001DA 8B1E[2200]              	mov bx, [py_raquete]
   252 000001DE 89D8                      mov		ax, bx
   253 000001E0 81EB3200                	sub bx, 50
   254 000001E4 50                        push		ax
   255 000001E5 B85802                    mov		ax, 600
   256 000001E8 50                        push		ax
   257 000001E9 89D8                      mov		ax, bx
   258 000001EB 50                        push		ax
   259 000001EC E8A403                    call		line
   260 000001EF C3                      	ret
   261                                  
   262                                  incrementa_pc:
   263 000001F0 803E[2D00]09            	cmp byte[pc_points_0], 9
   264 000001F5 7C0A                    	jl inc0_pc
   265 000001F7 C606[2D00]00            	mov byte[pc_points_0], 0
   266 000001FC FE06[2F00]              	inc byte[pc_points_1]
   267 00000200 C3                      	ret
   268                                  	inc0_pc:
   269 00000201 FE06[2D00]              		inc byte[pc_points_0]
   270 00000205 C3                      		ret
   271                                  
   272                                  sobrepoe_bola:
   273 00000206 C606[0000]00            	mov		byte[cor],preto	
   274 0000020B FF36[1E00]                push	word[px_bola]
   275 0000020F FF36[2000]                push	word[py_bola]
   276 00000213 680500                    push	word 5
   277 00000216 E8BD02                    call	full_circle
   278 00000219 C3                      	ret
   279                                  
   280                                  desenha_bola_vermelha:
   281 0000021A C606[0000]04            	mov		byte[cor],vermelho	;circulo vermelho
   282 0000021F A1[1E00]                	mov 	ax, [px_bola]
   283 00000222 0306[1800]              	add		ax, [velx]
   284 00000226 A3[1E00]                	mov		[px_bola], ax
   285 00000229 50                      	push 	ax
   286 0000022A A1[2000]                	mov 	ax, [py_bola]
   287 0000022D 0306[1A00]              	add		ax, [vely]
   288 00000231 A3[2000]                	mov		[py_bola], ax
   289 00000234 50                      	push 	ax
   290 00000235 680500                  	push	word 5
   291 00000238 E89B02                  	call	full_circle
   292 0000023B C3                      	ret
   293                                  
   294                                  colisao_x:
   295 0000023C A1[1E00]                  mov 	ax, [px_bola]
   296 0000023F 0306[1800]                add		ax, [velx]
   297 00000243 3D7A02                    cmp		ax, 634
   298 00000246 7D05                      jge		avalia_x
   299 00000248 3D0900                    cmp		ax, 9
   300 0000024B 7D16                      jge		nao_colidiu_parede
   301                                  	avalia_x:
   302 0000024D 813E[1800]0000          		cmp   word[velx], 0
   303 00000253 7E03                    		jle		colidiu_parede
   304 00000255 E898FF                  		call  incrementa_pc
   305                                  	colidiu_parede:
   306 00000258 BBFFFF                  		mov		bx, -1
   307 0000025B A1[1800]                		mov		ax, [velx]
   308 0000025E F7EB                    		imul	bx
   309 00000260 A3[1800]                		mov		[velx], ax
   310                                  	nao_colidiu_parede:
   311 00000263 A1[1E00]                		mov 	ax, word[px_bola]
   312 00000266 813E[1800]0000          		cmp   word[velx], 0
   313 0000026C 7E25                    		jle 	nao_colidiu_raquete
   314 0000026E 3D5202                  		cmp 	ax, 594
   315 00000271 7520                    		jne   nao_colidiu_raquete
   316 00000273 A1[2000]                		mov 	ax,	word[py_bola]
   317 00000276 3B06[2200]              		cmp		ax, word[py_raquete]
   318 0000027A 7F17                    		jg		nao_colidiu_raquete
   319 0000027C 053200                  		add 	ax, 50
   320 0000027F 3B06[2200]              		cmp		ax, word[py_raquete]
   321 00000283 7C0E                    		jl    nao_colidiu_raquete
   322                                  
   323 00000285 E80C00                  		call  incrementa_player
   324 00000288 BBFFFF                  		mov		bx, -1
   325 0000028B A1[1800]                		mov		ax, [velx]
   326 0000028E F7EB                    		imul	bx
   327 00000290 A3[1800]                		mov		[velx], ax
   328                                  
   329                                  	nao_colidiu_raquete:
   330 00000293 C3                      		ret
   331                                  
   332                                  incrementa_player:
   333 00000294 803E[2C00]09            	cmp byte[player_points_0], 9
   334 00000299 7C0A                    	jl inc0_player
   335 0000029B C606[2C00]00            	mov byte[player_points_0], 0
   336 000002A0 FE06[2E00]              	inc byte[player_points_1]
   337 000002A4 C3                      	ret
   338                                  	inc0_player:
   339 000002A5 FE06[2C00]              		inc byte[player_points_0]
   340 000002A9 C3                      		ret
   341                                  	
   342                                  keyint:
   343 000002AA 50                      	PUSH    AX
   344 000002AB 53                      	push    bx
   345 000002AC 1E                      	push    ds
   346 000002AD B8[0000]                	mov     ax,data
   347 000002B0 8ED8                    	mov     ds,ax
   348 000002B2 E460                    	IN      AL, kb_data
   349 000002B4 FF06[0500]              	inc     WORD [p_i]
   350 000002B8 8126[0500]0700          	and     WORD [p_i],7
   351 000002BE 8B1E[0500]              	mov     bx,[p_i]
   352 000002C2 8887[2400]              	mov     [bx+tecla],al
   353 000002C6 E461                    	IN      AL, kb_ctl
   354 000002C8 0C80                    	OR      AL, 80h
   355 000002CA E661                    	OUT     kb_ctl, AL
   356 000002CC 247F                    	AND     AL, 7Fh
   357 000002CE E661                    	OUT     kb_ctl, AL
   358 000002D0 B020                    	MOV     AL, eoi
   359 000002D2 E620                    	OUT     pictrl, AL
   360                                  
   361                                  	leTeclado:
   362 000002D4 A1[0500]                		mov     ax,[p_i]
   363 000002D7 3B06[0700]              		CMP     ax,[p_t]
   364 000002DB 7503                    		jne     leTeclado_leTecla
   365 000002DD E9B400                  		jmp			fim_controle
   366                                  		; ret
   367                                  		leTeclado_leTecla:
   368 000002E0 FF06[0700]              			inc     word[p_t]
   369 000002E4 8126[0700]0700          			and     word[p_t],7
   370 000002EA 8B1E[0700]              			mov     bx,[p_t]
   371 000002EE 31C0                    			XOR     AX, AX
   372 000002F0 8A87[2400]              			MOV     AL, [bx+tecla]
   373 000002F4 A2[0E00]                			mov     [tecla_u],al
   374                                  
   375                                  	continua1:
   376 000002F7 803E[0E00]81            		CMP     BYTE [tecla_u], 81h	; compara ESC
   377 000002FC 7406                    		JE      fim_programa
   378 000002FE E82300                  		call    controle_jogo
   379 00000301 E99000                  		jmp			fim_controle
   380                                  
   381                                  	fim_programa:
   382 00000304 FA                      		CLI
   383 00000305 31C0                    		xor			ax, ax
   384 00000307 8EC0                    		MOV     ES, AX
   385 00000309 A1[0100]                		MOV     AX, [cs_dos]
   386 0000030C 26A32600                		MOV     [ES:int9*4+2], AX
   387 00000310 A1[0300]                		MOV     AX, [offset_dos]
   388 00000313 26A32400                		MOV     [ES:int9*4], AX 
   389 00000317 31C0                    		XOR     AX, AX
   390 00000319 A0[0F00]                		mov 		al, byte[modo_anterior]
   391 0000031C CD10                    		int			10h
   392 0000031E 31C0                    		XOR     AX, AX
   393 00000320 B44C                    		MOV     AH, 4Ch
   394 00000322 CD21                    		int     21h
   395                                  
   396                                  	controle_jogo:
   397 00000324 803E[0E00]4E            		cmp byte[tecla_u], 4eh
   398 00000329 7416                    		je	inc_vel
   399 0000032B 803E[0E00]4A            		cmp byte[tecla_u], 4ah
   400 00000330 7421                    		je	dec_vel
   401 00000332 803E[0E00]16            		cmp byte[tecla_u], 16h
   402 00000337 742C                    		je sobe_raquete
   403 00000339 803E[0E00]20            		cmp byte[tecla_u], 20h
   404 0000033E 743C                    		je desce_raquete
   405 00000340 C3                      		ret
   406                                  
   407                                  	inc_vel:
   408 00000341 803E[B300]05            		cmp byte[velocidade_jogo], 5
   409 00000346 744B                    		je retorna_controle
   410 00000348 FE06[B300]              		inc byte[velocidade_jogo]
   411 0000034C 812E[1C00]A406          		sub word[vel_relogio], 1700
   412 00000352 C3                      		ret
   413                                  
   414                                  	dec_vel:
   415 00000353 803E[B300]01            		cmp byte[velocidade_jogo], 1
   416 00000358 7439                    		je retorna_controle
   417 0000035A FE0E[B300]              		dec byte[velocidade_jogo]
   418 0000035E 8106[1C00]A406          		add word[vel_relogio], 1700
   419 00000364 C3                      		ret
   420                                  
   421                                  	sobe_raquete:
   422 00000365 C606[0000]00            		mov byte[cor], preto
   423 0000036A E869FE                  		call desenhaRaquete
   424 0000036D 813E[2200]9001          		cmp word[py_raquete], 400
   425 00000373 7D1E                    		jge retorna_controle
   426 00000375 8106[2200]0800          		add word[py_raquete], 8
   427 0000037B C3                      		ret
   428                                  
   429                                  	desce_raquete:
   430 0000037C C606[0000]00            		mov byte[cor], preto
   431 00000381 E852FE                  		call desenhaRaquete
   432 00000384 813E[2200]3A00          		cmp word[py_raquete], 58
   433 0000038A 7E07                    		jle retorna_controle
   434 0000038C 812E[2200]0800          		sub word[py_raquete], 8
   435 00000392 C3                      		ret
   436                                  
   437                                  	retorna_controle:
   438 00000393 C3                      		ret
   439                                  
   440                                  	fim_controle:
   441 00000394 B020                    		mov al, 20h
   442 00000396 E620                    		out 20h, al
   443 00000398 1F                      		pop     ds
   444 00000399 5B                      		pop     bx
   445 0000039A 58                      		POP     AX
   446 0000039B CF                      		IRET
   447                                  		
   448                                  cursor:
   449 0000039C 9C                      		pushf
   450 0000039D 50                      		push 		ax
   451 0000039E 53                      		push 		bx
   452 0000039F 51                      		push		cx
   453 000003A0 52                      		push		dx
   454 000003A1 56                      		push		si
   455 000003A2 57                      		push		di
   456 000003A3 55                      		push		bp
   457 000003A4 B402                    		mov     	ah,2
   458 000003A6 B700                    		mov     	bh,0
   459 000003A8 CD10                    		int     	10h
   460 000003AA 5D                      		pop		bp
   461 000003AB 5F                      		pop		di
   462 000003AC 5E                      		pop		si
   463 000003AD 5A                      		pop		dx
   464 000003AE 59                      		pop		cx
   465 000003AF 5B                      		pop		bx
   466 000003B0 58                      		pop		ax
   467 000003B1 9D                      		popf
   468 000003B2 C3                      		ret
   469                                  ;_____________________________________________________________________________
   470                                  ;
   471                                  ;   fun��o caracter escrito na posi��o do cursor
   472                                  ;
   473                                  ; al= caracter a ser escrito
   474                                  ; cor definida na variavel cor
   475                                  caracter:
   476 000003B3 9C                      		pushf
   477 000003B4 50                      		push 		ax
   478 000003B5 53                      		push 		bx
   479 000003B6 51                      		push		cx
   480 000003B7 52                      		push		dx
   481 000003B8 56                      		push		si
   482 000003B9 57                      		push		di
   483 000003BA 55                      		push		bp
   484 000003BB B409                        		mov     	ah,9
   485 000003BD B700                        		mov     	bh,0
   486 000003BF B90100                      		mov     	cx,1
   487 000003C2 8A1E[0000]                 		mov     	bl,[cor]
   488 000003C6 CD10                        		int     	10h
   489 000003C8 5D                      		pop		bp
   490 000003C9 5F                      		pop		di
   491 000003CA 5E                      		pop		si
   492 000003CB 5A                      		pop		dx
   493 000003CC 59                      		pop		cx
   494 000003CD 5B                      		pop		bx
   495 000003CE 58                      		pop		ax
   496 000003CF 9D                      		popf
   497 000003D0 C3                      		ret
   498                                  
   499                                  plot_xy:
   500 000003D1 55                      		push		bp
   501 000003D2 89E5                    		mov		bp,sp
   502 000003D4 9C                      		pushf
   503 000003D5 50                      		push 		ax
   504 000003D6 53                      		push 		bx
   505 000003D7 51                      		push		cx
   506 000003D8 52                      		push		dx
   507 000003D9 56                      		push		si
   508 000003DA 57                      		push		di
   509 000003DB B40C                    	    mov     	ah,0ch
   510 000003DD A0[0000]                	    mov     	al,[cor]
   511 000003E0 B700                    	    mov     	bh,0
   512 000003E2 BADF01                  	    mov     	dx,479
   513 000003E5 2B5604                  		sub		dx,[bp+4]
   514 000003E8 8B4E06                  	    mov     	cx,[bp+6]
   515 000003EB CD10                    	    int     	10h
   516 000003ED 5F                      		pop		di
   517 000003EE 5E                      		pop		si
   518 000003EF 5A                      		pop		dx
   519 000003F0 59                      		pop		cx
   520 000003F1 5B                      		pop		bx
   521 000003F2 58                      		pop		ax
   522 000003F3 9D                      		popf
   523 000003F4 5D                      		pop		bp
   524 000003F5 C20400                  		ret		4
   525                                  ;_____________________________________________________________________________
   526                                  ;    fun��o circle
   527                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   528                                  ; cor definida na variavel cor
   529                                  circle:
   530 000003F8 55                      	push 	bp
   531 000003F9 89E5                    	mov	 	bp,sp
   532 000003FB 9C                      	pushf                        ;coloca os flags na pilha
   533 000003FC 50                      	push 	ax
   534 000003FD 53                      	push 	bx
   535 000003FE 51                      	push	cx
   536 000003FF 52                      	push	dx
   537 00000400 56                      	push	si
   538 00000401 57                      	push	di
   539                                  	
   540 00000402 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   541 00000405 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   542 00000408 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   543                                  	
   544 0000040B 89DA                    	mov 	dx,bx	
   545 0000040D 01CA                    	add		dx,cx       ;ponto extremo superior
   546 0000040F 50                      	push    ax			
   547 00000410 52                      	push	dx
   548 00000411 E8BDFF                  	call plot_xy
   549                                  	
   550 00000414 89DA                    	mov		dx,bx
   551 00000416 29CA                    	sub		dx,cx       ;ponto extremo inferior
   552 00000418 50                      	push    ax			
   553 00000419 52                      	push	dx
   554 0000041A E8B4FF                  	call plot_xy
   555                                  	
   556 0000041D 89C2                    	mov 	dx,ax	
   557 0000041F 01CA                    	add		dx,cx       ;ponto extremo direita
   558 00000421 52                      	push    dx			
   559 00000422 53                      	push	bx
   560 00000423 E8ABFF                  	call plot_xy
   561                                  	
   562 00000426 89C2                    	mov		dx,ax
   563 00000428 29CA                    	sub		dx,cx       ;ponto extremo esquerda
   564 0000042A 52                      	push    dx			
   565 0000042B 53                      	push	bx
   566 0000042C E8A2FF                  	call plot_xy
   567                                  		
   568 0000042F 89CF                    	mov		di,cx
   569 00000431 81EF0100                	sub		di,1	 ;di=r-1
   570 00000435 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   571                                  	
   572                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   573                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   574                                  ;valores positivos para d
   575                                  
   576                                  stay:				;loop
   577 00000438 89FE                    	mov		si,di
   578 0000043A 81FE0000                	cmp		si,0
   579 0000043E 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   580 00000440 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   581 00000442 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   582 00000444 81C60300                	add		si,3
   583 00000448 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   584 0000044A 42                      	inc		dx		;incrementa dx
   585 0000044B E90E00                  	jmp		plotar
   586                                  inf:	
   587 0000044E 89D6                    	mov		si,dx
   588 00000450 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   589 00000452 D1E6                    	sal		si,1
   590 00000454 81C60500                	add		si,5
   591 00000458 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   592 0000045A 42                      	inc		dx		;incrementa x (dx)
   593 0000045B 49                      	dec		cx		;decrementa y (cx)
   594                                  	
   595                                  plotar:	
   596 0000045C 89D6                    	mov		si,dx
   597 0000045E 01C6                    	add		si,ax
   598 00000460 56                      	push    si			;coloca a abcisa x+xc na pilha
   599 00000461 89CE                    	mov		si,cx
   600 00000463 01DE                    	add		si,bx
   601 00000465 56                      	push    si			;coloca a ordenada y+yc na pilha
   602 00000466 E868FF                  	call plot_xy		;toma conta do segundo octante
   603 00000469 89C6                    	mov		si,ax
   604 0000046B 01D6                    	add		si,dx
   605 0000046D 56                      	push    si			;coloca a abcisa xc+x na pilha
   606 0000046E 89DE                    	mov		si,bx
   607 00000470 29CE                    	sub		si,cx
   608 00000472 56                      	push    si			;coloca a ordenada yc-y na pilha
   609 00000473 E85BFF                  	call plot_xy		;toma conta do s�timo octante
   610 00000476 89C6                    	mov		si,ax
   611 00000478 01CE                    	add		si,cx
   612 0000047A 56                      	push    si			;coloca a abcisa xc+y na pilha
   613 0000047B 89DE                    	mov		si,bx
   614 0000047D 01D6                    	add		si,dx
   615 0000047F 56                      	push    si			;coloca a ordenada yc+x na pilha
   616 00000480 E84EFF                  	call plot_xy		;toma conta do segundo octante
   617 00000483 89C6                    	mov		si,ax
   618 00000485 01CE                    	add		si,cx
   619 00000487 56                      	push    si			;coloca a abcisa xc+y na pilha
   620 00000488 89DE                    	mov		si,bx
   621 0000048A 29D6                    	sub		si,dx
   622 0000048C 56                      	push    si			;coloca a ordenada yc-x na pilha
   623 0000048D E841FF                  	call plot_xy		;toma conta do oitavo octante
   624 00000490 89C6                    	mov		si,ax
   625 00000492 29D6                    	sub		si,dx
   626 00000494 56                      	push    si			;coloca a abcisa xc-x na pilha
   627 00000495 89DE                    	mov		si,bx
   628 00000497 01CE                    	add		si,cx
   629 00000499 56                      	push    si			;coloca a ordenada yc+y na pilha
   630 0000049A E834FF                  	call plot_xy		;toma conta do terceiro octante
   631 0000049D 89C6                    	mov		si,ax
   632 0000049F 29D6                    	sub		si,dx
   633 000004A1 56                      	push    si			;coloca a abcisa xc-x na pilha
   634 000004A2 89DE                    	mov		si,bx
   635 000004A4 29CE                    	sub		si,cx
   636 000004A6 56                      	push    si			;coloca a ordenada yc-y na pilha
   637 000004A7 E827FF                  	call plot_xy		;toma conta do sexto octante
   638 000004AA 89C6                    	mov		si,ax
   639 000004AC 29CE                    	sub		si,cx
   640 000004AE 56                      	push    si			;coloca a abcisa xc-y na pilha
   641 000004AF 89DE                    	mov		si,bx
   642 000004B1 29D6                    	sub		si,dx
   643 000004B3 56                      	push    si			;coloca a ordenada yc-x na pilha
   644 000004B4 E81AFF                  	call plot_xy		;toma conta do quinto octante
   645 000004B7 89C6                    	mov		si,ax
   646 000004B9 29CE                    	sub		si,cx
   647 000004BB 56                      	push    si			;coloca a abcisa xc-y na pilha
   648 000004BC 89DE                    	mov		si,bx
   649 000004BE 01D6                    	add		si,dx
   650 000004C0 56                      	push    si			;coloca a ordenada yc-x na pilha
   651 000004C1 E80DFF                  	call plot_xy		;toma conta do quarto octante
   652                                  	
   653 000004C4 39D1                    	cmp		cx,dx
   654 000004C6 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   655 000004C8 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   656                                  	
   657                                  	
   658                                  fim_circle:
   659 000004CB 5F                      	pop		di
   660 000004CC 5E                      	pop		si
   661 000004CD 5A                      	pop		dx
   662 000004CE 59                      	pop		cx
   663 000004CF 5B                      	pop		bx
   664 000004D0 58                      	pop		ax
   665 000004D1 9D                      	popf
   666 000004D2 5D                      	pop		bp
   667 000004D3 C20600                  	ret		6
   668                                  ;-----------------------------------------------------------------------------
   669                                  ;    fun��o full_circle
   670                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   671                                  ; cor definida na variavel cor					  
   672                                  full_circle:
   673 000004D6 55                      	push 	bp
   674 000004D7 89E5                    	mov	 	bp,sp
   675 000004D9 9C                      	pushf                        ;coloca os flags na pilha
   676 000004DA 50                      	push 	ax
   677 000004DB 53                      	push 	bx
   678 000004DC 51                      	push	cx
   679 000004DD 52                      	push	dx
   680 000004DE 56                      	push	si
   681 000004DF 57                      	push	di
   682                                  
   683 000004E0 8B4608                  	mov		ax,[bp+8]    ; resgata xc
   684 000004E3 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
   685 000004E6 8B4E04                  	mov		cx,[bp+4]    ; resgata r
   686                                  	
   687 000004E9 89DE                    	mov		si,bx
   688 000004EB 29CE                    	sub		si,cx
   689 000004ED 50                      	push    ax			;coloca xc na pilha			
   690 000004EE 56                      	push	si			;coloca yc-r na pilha
   691 000004EF 89DE                    	mov		si,bx
   692 000004F1 01CE                    	add		si,cx
   693 000004F3 50                      	push	ax		;coloca xc na pilha
   694 000004F4 56                      	push	si		;coloca yc+r na pilha
   695 000004F5 E89B00                  	call line
   696                                  	
   697                                  		
   698 000004F8 89CF                    	mov		di,cx
   699 000004FA 81EF0100                	sub		di,1	 ;di=r-1
   700 000004FE BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   701                                  	
   702                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   703                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   704                                  ;valores positivos para d
   705                                  
   706                                  stay_full:				;loop
   707 00000501 89FE                    	mov		si,di
   708 00000503 81FE0000                	cmp		si,0
   709 00000507 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   710 00000509 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   711 0000050B D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
   712 0000050D 81C60300                	add		si,3
   713 00000511 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
   714 00000513 42                      	inc		dx		;incrementa dx
   715 00000514 E90E00                  	jmp		plotar_full
   716                                  inf_full:	
   717 00000517 89D6                    	mov		si,dx
   718 00000519 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   719 0000051B D1E6                    	sal		si,1
   720 0000051D 81C60500                	add		si,5
   721 00000521 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   722 00000523 42                      	inc		dx		;incrementa x (dx)
   723 00000524 49                      	dec		cx		;decrementa y (cx)
   724                                  	
   725                                  plotar_full:	
   726 00000525 89C6                    	mov		si,ax
   727 00000527 01CE                    	add		si,cx
   728 00000529 56                      	push	si		;coloca a abcisa y+xc na pilha			
   729 0000052A 89DE                    	mov		si,bx
   730 0000052C 29D6                    	sub		si,dx
   731 0000052E 56                      	push    si		;coloca a ordenada yc-x na pilha
   732 0000052F 89C6                    	mov		si,ax
   733 00000531 01CE                    	add		si,cx
   734 00000533 56                      	push	si		;coloca a abcisa y+xc na pilha	
   735 00000534 89DE                    	mov		si,bx
   736 00000536 01D6                    	add		si,dx
   737 00000538 56                      	push    si		;coloca a ordenada yc+x na pilha	
   738 00000539 E85700                  	call 	line
   739                                  	
   740 0000053C 89C6                    	mov		si,ax
   741 0000053E 01D6                    	add		si,dx
   742 00000540 56                      	push	si		;coloca a abcisa xc+x na pilha			
   743 00000541 89DE                    	mov		si,bx
   744 00000543 29CE                    	sub		si,cx
   745 00000545 56                      	push    si		;coloca a ordenada yc-y na pilha
   746 00000546 89C6                    	mov		si,ax
   747 00000548 01D6                    	add		si,dx
   748 0000054A 56                      	push	si		;coloca a abcisa xc+x na pilha	
   749 0000054B 89DE                    	mov		si,bx
   750 0000054D 01CE                    	add		si,cx
   751 0000054F 56                      	push    si		;coloca a ordenada yc+y na pilha	
   752 00000550 E84000                  	call	line
   753                                  	
   754 00000553 89C6                    	mov		si,ax
   755 00000555 29D6                    	sub		si,dx
   756 00000557 56                      	push	si		;coloca a abcisa xc-x na pilha			
   757 00000558 89DE                    	mov		si,bx
   758 0000055A 29CE                    	sub		si,cx
   759 0000055C 56                      	push    si		;coloca a ordenada yc-y na pilha
   760 0000055D 89C6                    	mov		si,ax
   761 0000055F 29D6                    	sub		si,dx
   762 00000561 56                      	push	si		;coloca a abcisa xc-x na pilha	
   763 00000562 89DE                    	mov		si,bx
   764 00000564 01CE                    	add		si,cx
   765 00000566 56                      	push    si		;coloca a ordenada yc+y na pilha	
   766 00000567 E82900                  	call	line
   767                                  	
   768 0000056A 89C6                    	mov		si,ax
   769 0000056C 29CE                    	sub		si,cx
   770 0000056E 56                      	push	si		;coloca a abcisa xc-y na pilha			
   771 0000056F 89DE                    	mov		si,bx
   772 00000571 29D6                    	sub		si,dx
   773 00000573 56                      	push    si		;coloca a ordenada yc-x na pilha
   774 00000574 89C6                    	mov		si,ax
   775 00000576 29CE                    	sub		si,cx
   776 00000578 56                      	push	si		;coloca a abcisa xc-y na pilha	
   777 00000579 89DE                    	mov		si,bx
   778 0000057B 01D6                    	add		si,dx
   779 0000057D 56                      	push    si		;coloca a ordenada yc+x na pilha	
   780 0000057E E81200                  	call	line
   781                                  	
   782 00000581 39D1                    	cmp		cx,dx
   783 00000583 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   784 00000585 E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   785                                  	
   786                                  	
   787                                  fim_full_circle:
   788 00000588 5F                      	pop		di
   789 00000589 5E                      	pop		si
   790 0000058A 5A                      	pop		dx
   791 0000058B 59                      	pop		cx
   792 0000058C 5B                      	pop		bx
   793 0000058D 58                      	pop		ax
   794 0000058E 9D                      	popf
   795 0000058F 5D                      	pop		bp
   796 00000590 C20600                  	ret		6
   797                                  ;-----------------------------------------------------------------------------
   798                                  ;
   799                                  ;   fun��o line
   800                                  ;
   801                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   802                                  line:
   803 00000593 55                      		push		bp
   804 00000594 89E5                    		mov		bp,sp
   805 00000596 9C                      		pushf                        ;coloca os flags na pilha
   806 00000597 50                      		push 		ax
   807 00000598 53                      		push 		bx
   808 00000599 51                      		push		cx
   809 0000059A 52                      		push		dx
   810 0000059B 56                      		push		si
   811 0000059C 57                      		push		di
   812 0000059D 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   813 000005A0 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   814 000005A3 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   815 000005A6 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   816 000005A9 39C8                    		cmp		ax,cx
   817 000005AB 7408                    		je		line2
   818 000005AD 721C                    		jb		line1
   819 000005AF 91                      		xchg		ax,cx
   820 000005B0 87DA                    		xchg		bx,dx
   821 000005B2 E91600                  		jmp		line1
   822                                  line2:		; deltax=0
   823 000005B5 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   824 000005B7 7202                    		jb		line3
   825 000005B9 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   826                                  line3:	; dx > bx
   827 000005BB 50                      		push		ax
   828 000005BC 53                      		push		bx
   829 000005BD E811FE                  		call 		plot_xy
   830 000005C0 39D3                    		cmp		bx,dx
   831 000005C2 7503                    		jne		line31
   832 000005C4 E9C600                  		jmp		fim_line
   833 000005C7 43                      line31:		inc		bx
   834 000005C8 E9F0FF                  		jmp		line3
   835                                  ;deltax <>0
   836                                  line1:
   837                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   838                                  	; cx > ax
   839 000005CB 51                      		push		cx
   840 000005CC 29C1                    		sub		cx,ax
   841 000005CE 890E[1400]              		mov		[deltax],cx
   842 000005D2 59                      		pop		cx
   843 000005D3 52                      		push		dx
   844 000005D4 29DA                    		sub		dx,bx
   845 000005D6 7702                    		ja		line32
   846 000005D8 F7DA                    		neg		dx
   847                                  line32:		
   848 000005DA 8916[1600]              		mov		[deltay],dx
   849 000005DE 5A                      		pop		dx
   850                                  
   851 000005DF 50                      		push		ax
   852 000005E0 A1[1400]                		mov		ax,[deltax]
   853 000005E3 3B06[1600]              		cmp		ax,[deltay]
   854 000005E7 58                      		pop		ax
   855 000005E8 724D                    		jb		line5
   856                                  
   857                                  	; cx > ax e deltax>deltay
   858 000005EA 51                      		push		cx
   859 000005EB 29C1                    		sub		cx,ax
   860 000005ED 890E[1400]              		mov		[deltax],cx
   861 000005F1 59                      		pop		cx
   862 000005F2 52                      		push		dx
   863 000005F3 29DA                    		sub		dx,bx
   864 000005F5 8916[1600]              		mov		[deltay],dx
   865 000005F9 5A                      		pop		dx
   866                                  
   867 000005FA 89C6                    		mov		si,ax
   868                                  line4:
   869 000005FC 50                      		push		ax
   870 000005FD 52                      		push		dx
   871 000005FE 56                      		push		si
   872 000005FF 29C6                    		sub		si,ax	;(x-x1)
   873 00000601 A1[1600]                		mov		ax,[deltay]
   874 00000604 F7EE                    		imul		si
   875 00000606 8B36[1400]              		mov		si,[deltax]		;arredondar
   876 0000060A D1EE                    		shr		si,1
   877                                  ; se numerador (DX)>0 soma se <0 subtrai
   878 0000060C 81FA0000                		cmp		dx,0
   879 00000610 7C09                    		jl		ar1
   880 00000612 01F0                    		add		ax,si
   881 00000614 81D20000                		adc		dx,0
   882 00000618 E90600                  		jmp		arc1
   883 0000061B 29F0                    ar1:		sub		ax,si
   884 0000061D 81DA0000                		sbb		dx,0
   885                                  arc1:
   886 00000621 F73E[1400]              		idiv		word [deltax]
   887 00000625 01D8                    		add		ax,bx
   888 00000627 5E                      		pop		si
   889 00000628 56                      		push		si
   890 00000629 50                      		push		ax
   891 0000062A E8A4FD                  		call		plot_xy
   892 0000062D 5A                      		pop		dx
   893 0000062E 58                      		pop		ax
   894 0000062F 39CE                    		cmp		si,cx
   895 00000631 745A                    		je		fim_line
   896 00000633 46                      		inc		si
   897 00000634 E9C5FF                  		jmp		line4
   898                                  
   899 00000637 39D3                    line5:		cmp		bx,dx
   900 00000639 7203                    		jb 		line7
   901 0000063B 91                      		xchg		ax,cx
   902 0000063C 87DA                    		xchg		bx,dx
   903                                  line7:
   904 0000063E 51                      		push		cx
   905 0000063F 29C1                    		sub		cx,ax
   906 00000641 890E[1400]              		mov		[deltax],cx
   907 00000645 59                      		pop		cx
   908 00000646 52                      		push		dx
   909 00000647 29DA                    		sub		dx,bx
   910 00000649 8916[1600]              		mov		[deltay],dx
   911 0000064D 5A                      		pop		dx
   912                                  
   913                                  
   914                                  
   915 0000064E 89DE                    		mov		si,bx
   916                                  line6:
   917 00000650 52                      		push		dx
   918 00000651 56                      		push		si
   919 00000652 50                      		push		ax
   920 00000653 29DE                    		sub		si,bx	;(y-y1)
   921 00000655 A1[1400]                		mov		ax,[deltax]
   922 00000658 F7EE                    		imul		si
   923 0000065A 8B36[1600]              		mov		si,[deltay]		;arredondar
   924 0000065E D1EE                    		shr		si,1
   925                                  ; se numerador (DX)>0 soma se <0 subtrai
   926 00000660 81FA0000                		cmp		dx,0
   927 00000664 7C09                    		jl		ar2
   928 00000666 01F0                    		add		ax,si
   929 00000668 81D20000                		adc		dx,0
   930 0000066C E90600                  		jmp		arc2
   931 0000066F 29F0                    ar2:		sub		ax,si
   932 00000671 81DA0000                		sbb		dx,0
   933                                  arc2:
   934 00000675 F73E[1600]              		idiv		word [deltay]
   935 00000679 89C7                    		mov		di,ax
   936 0000067B 58                      		pop		ax
   937 0000067C 01C7                    		add		di,ax
   938 0000067E 5E                      		pop		si
   939 0000067F 57                      		push		di
   940 00000680 56                      		push		si
   941 00000681 E84DFD                  		call		plot_xy
   942 00000684 5A                      		pop		dx
   943 00000685 39D6                    		cmp		si,dx
   944 00000687 7404                    		je		fim_line
   945 00000689 46                      		inc		si
   946 0000068A E9C3FF                  		jmp		line6
   947                                  
   948                                  fim_line:
   949 0000068D 5F                      		pop		di
   950 0000068E 5E                      		pop		si
   951 0000068F 5A                      		pop		dx
   952 00000690 59                      		pop		cx
   953 00000691 5B                      		pop		bx
   954 00000692 58                      		pop		ax
   955 00000693 9D                      		popf
   956 00000694 5D                      		pop		bp
   957 00000695 C20800                  		ret		8
   958                                  ;*******************************************************************
   959                                  segment data
   960                                  
   961 00000000 0F                      cor		db		branco_intenso
   962                                  
   963                                  ;	I R G B COR
   964                                  ;	0 0 0 0 preto
   965                                  ;	0 0 0 1 azul
   966                                  ;	0 0 1 0 verde
   967                                  ;	0 0 1 1 cyan
   968                                  ;	0 1 0 0 vermelho
   969                                  ;	0 1 0 1 magenta
   970                                  ;	0 1 1 0 marrom
   971                                  ;	0 1 1 1 branco
   972                                  ;	1 0 0 0 cinza
   973                                  ;	1 0 0 1 azul claro
   974                                  ;	1 0 1 0 verde claro
   975                                  ;	1 0 1 1 cyan claro
   976                                  ;	1 1 0 0 rosa
   977                                  ;	1 1 0 1 magenta claro
   978                                  ;	1 1 1 0 amarelo
   979                                  ;	1 1 1 1 branco intenso
   980                                  
   981                                  preto		equ		0
   982                                  azul		equ		1
   983                                  verde		equ		2
   984                                  cyan		equ		3
   985                                  vermelho	equ		4
   986                                  magenta		equ		5
   987                                  marrom		equ		6
   988                                  branco		equ		7
   989                                  cinza		equ		8
   990                                  azul_claro	equ		9
   991                                  verde_claro	equ		10
   992                                  cyan_claro	equ		11
   993                                  rosa		equ		12
   994                                  magenta_claro	equ		13
   995                                  amarelo		equ		14
   996                                  branco_intenso	equ		15
   997                                  int9    equ 	9h
   998                                  kb_data equ 	60h  ;PORTA DE LEITURA DE TECLADO
   999                                  kb_ctl  equ 	61h  ;PORTA DE RESET PARA PEDIR NOVA INTERRUPCAO
  1000                                  pictrl  equ 	20h
  1001                                  eoi     equ 	20h
  1002 00000001 0100                    cs_dos  dw  	1
  1003 00000003 0100                    offset_dos  dw 	1
  1004 00000005 0000                    p_i     dw  	0   ;ponteiro p/ interrupcao (qnd pressiona tecla)  
  1005 00000007 0000                    p_t     dw  	0   ;ponterio p/ interrupcao ( qnd solta tecla) 
  1006 00000009 00000D0A24              teclasc DB  	0,0,13,10,'$'
  1007 0000000E 00                      tecla_u db 		0
  1008 0000000F 00                      modo_anterior	db		0
  1009 00000010 0000                    linha   	dw  		0
  1010 00000012 0000                    coluna  	dw  		0
  1011 00000014 0000                    deltax		dw		0
  1012 00000016 0000                    deltay		dw		0
  1013 00000018 0100                    velx        dw      1
  1014 0000001A 0100                    vely        dw      1
  1015 0000001C 401F                    vel_relogio	dw			8000
  1016 0000001E 4001                    px_bola          dw      320
  1017 00000020 F000                    py_bola          dw      240
  1018 00000022 F000                    py_raquete			dw	240
  1019 00000024 <res 00000008>          tecla   resb  	8 
  1020 0000002C 00                      player_points_0		db 0
  1021 0000002D 00                      pc_points_0				db 0
  1022 0000002E 00                      player_points_1		db 0
  1023 0000002F 00                      pc_points_1				db 0
  1024 00000030 0A00                    velocidade  dw      10
  1025 00000032 46756E63616F204772-     mens    	db  		'Funcao Grafica'
  1026 0000003B 6166696361         
  1027 00000040 45786572636963696F-     embarcados  db          'Exercicio de Programacao de Sistemas Embarcados I - 2022/2'
  1028 00000049 2064652050726F6772-
  1029 00000052 616D6163616F206465-
  1030 0000005B 2053697374656D6173-
  1031 00000064 20456D626172636164-
  1032 0000006D 6F732049202D203230-
  1033 00000076 32322F32           
  1034 0000007A 4D6172636F20416E74-     nome        db          'Marco Antonio Milaneze Oliari'
  1035 00000083 6F6E696F204D696C61-
  1036 0000008C 6E657A65204F6C6961-
  1037 00000095 7269               
  1038 00000097 436F6D70757461646F-     computador	db					'Computador'
  1039 000000A0 72                 
  1040 000000A1 56656C6F6369646164-     velocidade_atual_txt db 'Velocidade Atual: '
  1041 000000AA 6520417475616C3A20 
  1042 000000B3 01                      velocidade_jogo		db 1
  1043 000000B4 207820                  placar				db ' x '
  1044                                  ;*************************************************************************
  1045                                  segment stack stack
  1046 00000000 <res 00000200>              		resb 		512
  1047                                  stacktop:
  1048                                  
